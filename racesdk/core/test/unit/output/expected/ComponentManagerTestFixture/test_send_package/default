ComponentManagerTestFixture_test_send_package_Test::TestBody:  with manager=ComponentManager{ ComponentManagerInternal {
	 state: ACTIVATED
	 composition: Composite comms: composition_id, transport: transport_id, usermodel: usermodel_id, encodings: [["encoding_id"]], from plugins {}
	 encodings: {encoder: <EncodingComponentWrapper>, }
	 transport: <TransportComponentWrapper>
	 usermodel: <UserModelComponentWrapper>
	 wrappers: [<Sdk Wrapper for transport_id>, <Sdk Wrapper for usermodel_id>, <Sdk Wrapper for encoder>, ]
	 componentStates: {encoder: COMPONENT_STATE_STARTED, transport_id: COMPONENT_STATE_STARTED, usermodel_id: COMPONENT_STATE_STARTED, }
	 activateHandle: 42
	 pendingEncodings: {}
	 actions: [ActionInfo{action: Action{ id:1}, linkId: default link id, encoding size: 1, fragments: [], toBeRemoved: 0}, ]
	 links: {default link id: Link{
    linkId: default link id
    connections: ["default connection id"]
    actionQueue: [
        ActionInfo{action: Action{ id:1}, linkId: default link id, encoding size: 1, fragments: [], toBeRemoved: 0}, 
    ]
    packageQueue: []
}, }
	 connections: {default connection id: Connection{ connId default connection id, linkId default link id }, }
	 userInputMap: {}
}}
ComponentManagerTestFixture_test_send_package_Test::TestBody:  with manager=ComponentManager{ ComponentManagerInternal {
	 state: ACTIVATED
	 composition: Composite comms: composition_id, transport: transport_id, usermodel: usermodel_id, encodings: [["encoding_id"]], from plugins {}
	 encodings: {encoder: <EncodingComponentWrapper>, }
	 transport: <TransportComponentWrapper>
	 usermodel: <UserModelComponentWrapper>
	 wrappers: [<Sdk Wrapper for transport_id>, <Sdk Wrapper for usermodel_id>, <Sdk Wrapper for encoder>, ]
	 componentStates: {encoder: COMPONENT_STATE_STARTED, transport_id: COMPONENT_STATE_STARTED, usermodel_id: COMPONENT_STATE_STARTED, }
	 activateHandle: 42
	 pendingEncodings: {}
	 actions: [ActionInfo{action: Action{ id:1}, linkId: default link id, encoding size: 1, fragments: [PackageFragmentInfo{package: 45, action: 1, state: UNENCODED, offset: 0, len: 27}, ], toBeRemoved: 0}, ]
	 links: {default link id: Link{
    linkId: default link id
    connections: ["default connection id"]
    actionQueue: [
        ActionInfo{action: Action{ id:1}, linkId: default link id, encoding size: 1, fragments: [PackageFragmentInfo{package: 45, action: 1, state: UNENCODED, offset: 0, len: 27}, ], toBeRemoved: 0}, 
    ]
    packageQueue: [
        PackageInfo{ linkId: default link id, sdkHandle: 45, pendingEncodeHandle: 0, packageFragments: [PackageFragmentInfo{package: 45, action: 1, state: UNENCODED, offset: 0, len: 27}, ] }, 
    ]
}, }
	 connections: {default connection id: Connection{ connId default connection id, linkId default link id }, }
	 userInputMap: {}
}}
