ComponentPackageManagerTestFixture_test_encodeCoverTrafficForAction_no_packages_Test::TestBody:  with packageManager=PackageManager{
    pendingEncodings:{}
    nextEncodingHandle: 0
    fragments: {}
}
ComponentPackageManagerTestFixture_test_encodeCoverTrafficForAction_no_packages_Test::TestBody:  with mockComponentManager.mockLink=Link{
    linkId: mockLinkId
    connections: []
    actionQueue: [
        ActionInfo{action: Action{ id:3}, linkId: , encoding size: 1, fragments: [], toBeRemoved: 0}, 
    ]
    packageQueue: []
}
MockComponentManagerInternal::encodingComponentFromEncodingParams:  with params=EncodingParameters{ linkId: , type: , encodePackage: 0, json: }
MockEncodingComponentWrapper::encodeBytes:  with handle=1, params=EncodingParameters{ linkId: , type: , encodePackage: 0, json: }, bytes.size()=0
ComponentPackageManagerTestFixture_test_encodeCoverTrafficForAction_no_packages_Test::TestBody:  with packageManager=PackageManager{
    pendingEncodings:{
        1:EncodingInfo{ params: EncodingParameters{ linkId: , type: , encodePackage: 0, json: }, pendingEncodeHandle: 1, state: ENCODING }, 
    }
    nextEncodingHandle: 1
    fragments: {}
}
ComponentPackageManagerTestFixture_test_encodeCoverTrafficForAction_no_packages_Test::TestBody:  with mockComponentManager.mockLink=Link{
    linkId: mockLinkId
    connections: []
    actionQueue: [
        ActionInfo{action: Action{ id:3}, linkId: , encoding size: 1, fragments: [], toBeRemoved: 0}, 
    ]
    packageQueue: []
}
