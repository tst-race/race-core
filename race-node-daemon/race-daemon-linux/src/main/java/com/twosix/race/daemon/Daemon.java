//
// Copyright 2023 Two Six Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.twosix.race.daemon;

import com.twosix.race.daemon.sdk.RaceNodeDaemonConfig;
import com.twosix.race.daemon.sdk.RaceNodeDaemonSdk;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;

/** RACE node daemon main class. */
public class Daemon {
    private static final Logger logger = LoggerFactory.getLogger(Daemon.class);

    private final DaemonState state = new DaemonState();

    /**
     * Starts the daemon.
     *
     * <ol>
     *   <li>Initializes the daemon SDK
     *   <li>Initializes the bidirectional FIFO pipes
     *   <li>Starts publishing periodic node status updates
     * </ol>
     *
     * @param persona Current RACE node persona
     * @throws IOException
     * @throws InterruptedException
     */
    public Daemon(String persona) throws IOException, InterruptedException {
        logger.info("RACE node daemon initializing");
        RaceNodeDaemonConfig config = new RaceNodeDaemonConfig();
        config.setDaemonStateInfoJsonPath("/race-service-logs/daemon-state-info.json");
        config.setPersona(persona);
        config.setIsGenesis(isRaceAppInstalled());

        state.persona = persona;
        state.communicator = new ApplicationCommunication(state);

        state.sdk = new RaceNodeDaemonSdk(config);
        state.sdk.registerActionListener(new NodeActionListener(state));

        state.nodeStatusPublisher = new RaceNodeStatusPublisher(state);
        // Passing nulls uses the defaults
        state.nodeStatusPublisher.start(null, null);
    }

    /**
     * Starts the daemon application.
     *
     * <p>If the RACE_PERSONA environment variable is not set, the daemon will exit immediately.
     *
     * @param args Command-line arguments
     * @throws IOException
     * @throws InterruptedException
     */
    public static void main(String[] args) throws IOException, InterruptedException {
        String persona = System.getenv("RACE_PERSONA");

        if (persona.isEmpty()) {
            logger.error("Persona is empty. Unable to start.");
            System.exit(-1);
        }

        Daemon app = new Daemon(persona);
    }

    /**
     * Checks if the RACE app is currently installed on the device.
     *
     * <p>Installation is determined by checking for the existence of the RACE application
     * executable.
     *
     * @return true if the RACE app is installed
     */
    private boolean isRaceAppInstalled() {
        return new File("/usr/local/lib/race/core/race/bin/racetestapp").exists();
    }
}
